# Autogenerated from a Treetop grammar. Edits may be lost.


module Twig
module Parsing

module Body
  include Treetop::Runtime

  def root
    @root ||= :body
  end

  include Statement

  include Whitespace

  module Body0
    def statement_delim
      elements[1]
    end

    def statement
      elements[2]
    end
  end

  module Body1
    def first
      elements[0]
    end

    def more
      elements[1]
    end
  end

  def _nt_body
    start_index = index
    if node_cache[:body].has_key?(index)
      cached = node_cache[:body][index]
      if cached
        node_cache[:body][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_statement
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        s4, i4 = [], index
        loop do
          i5 = index
          r6 = _nt_space
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            r7 = _nt_tab
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r5 = r7
            else
              r8 = _nt_carriage_return
              if r8
                r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                r5 = r8
              else
                @index = i5
                r5 = nil
              end
            end
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s3 << r4
        if r4
          r9 = _nt_statement_delim
          s3 << r9
          if r9
            r10 = _nt_statement
            s3 << r10
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Body0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Body1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:body][start_index] = r0

    r0
  end

  def _nt_statement_delim
    start_index = index
    if node_cache[:statement_delim].has_key?(index)
      cached = node_cache[:statement_delim][index]
      if cached
        node_cache[:statement_delim][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?(";", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('";"')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_newline
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:statement_delim][start_index] = r0

    r0
  end

end

class BodyParser < Treetop::Runtime::CompiledParser
  include Body
end


end
end