# Autogenerated from a Treetop grammar. Edits may be lost.


module Twig
module Parsing

module Args
  include Treetop::Runtime

  def root
    @root ||= :args
  end

  include Whitespace

  include Identifier

  module Args0
    def arg
      elements[3]
    end
  end

  module Args1
    def first
      elements[0]
    end

    def more
      elements[1]
    end
  end

  def _nt_args
    start_index = index
    if node_cache[:args].has_key?(index)
      cached = node_cache[:args][index]
      if cached
        node_cache[:args][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_arg
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        s4, i4 = [], index
        loop do
          r5 = _nt_ws
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s3 << r4
        if r4
          if (match_len = has_terminal?(",", false, index))
            r6 = true
            @index += match_len
          else
            terminal_parse_failure('","')
            r6 = nil
          end
          s3 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_ws
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s3 << r7
            if r7
              r9 = _nt_arg
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Args0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(ArgsNode,input, i0...index, s0)
      r0.extend(Args1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:args][start_index] = r0

    r0
  end

  module Arg0
  end

  module Arg1
    def identifier
      elements[0]
    end

    def default_val
      elements[1]
    end
  end

  def _nt_arg
    start_index = index
    if node_cache[:arg].has_key?(index)
      cached = node_cache[:arg][index]
      if cached
        node_cache[:arg][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_identifier
    s0 << r1
    if r1
      i3, s3 = index, []
      s4, i4 = [], index
      loop do
        r5 = _nt_ws
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s3 << r4
      if r4
        if (match_len = has_terminal?("=", false, index))
          r6 = true
          @index += match_len
        else
          terminal_parse_failure('"="')
          r6 = nil
        end
        s3 << r6
        if r6
          s7, i7 = [], index
          loop do
            r8 = _nt_ws
            if r8
              s7 << r8
            else
              break
            end
          end
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          s3 << r7
          if r7
            if (match_len = has_terminal?("dummy", false, index))
              r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('"dummy"')
              r9 = nil
            end
            s3 << r9
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Arg0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Arg1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:arg][start_index] = r0

    r0
  end

end

class ArgsParser < Treetop::Runtime::CompiledParser
  include Args
end


end
end