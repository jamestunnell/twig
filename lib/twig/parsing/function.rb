# Autogenerated from a Treetop grammar. Edits may be lost.


module Twig
module Parsing

module Function
  include Treetop::Runtime

  def root
    @root ||= :function
  end

  include Identifier

  include Args

  include Body

  module Function0
    def identifier
      elements[1]
    end
  end

  module Function1
    def id
      elements[1]
    end

    def fargs
      elements[5]
    end

    def fbody
      elements[11]
    end

  end

  def _nt_function
    start_index = index
    if node_cache[:function].has_key?(index)
      cached = node_cache[:function][index]
      if cached
        node_cache[:function][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("function", false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"function"')
      r1 = nil
    end
    s0 << r1
    if r1
      i3, s3 = index, []
      s4, i4 = [], index
      loop do
        r5 = _nt_ws
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s3 << r4
      if r4
        r6 = _nt_identifier
        s3 << r6
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Function0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        s7, i7 = [], index
        loop do
          r8 = _nt_ws
          if r8
            s7 << r8
          else
            break
          end
        end
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        s0 << r7
        if r7
          if (match_len = has_terminal?("(", false, index))
            r9 = true
            @index += match_len
          else
            terminal_parse_failure('"("')
            r9 = nil
          end
          s0 << r9
          if r9
            s10, i10 = [], index
            loop do
              r11 = _nt_ws
              if r11
                s10 << r11
              else
                break
              end
            end
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
            s0 << r10
            if r10
              r13 = _nt_args
              if r13
                r12 = r13
              else
                r12 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r12
              if r12
                s14, i14 = [], index
                loop do
                  r15 = _nt_ws
                  if r15
                    s14 << r15
                  else
                    break
                  end
                end
                r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                s0 << r14
                if r14
                  if (match_len = has_terminal?(")", false, index))
                    r16 = true
                    @index += match_len
                  else
                    terminal_parse_failure('")"')
                    r16 = nil
                  end
                  s0 << r16
                  if r16
                    s17, i17 = [], index
                    loop do
                      r18 = _nt_ws
                      if r18
                        s17 << r18
                      else
                        break
                      end
                    end
                    r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
                    s0 << r17
                    if r17
                      if (match_len = has_terminal?("{", false, index))
                        r19 = true
                        @index += match_len
                      else
                        terminal_parse_failure('"{"')
                        r19 = nil
                      end
                      s0 << r19
                      if r19
                        s20, i20 = [], index
                        loop do
                          r21 = _nt_ws
                          if r21
                            s20 << r21
                          else
                            break
                          end
                        end
                        r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
                        s0 << r20
                        if r20
                          r23 = _nt_body
                          if r23
                            r22 = r23
                          else
                            r22 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s0 << r22
                          if r22
                            s24, i24 = [], index
                            loop do
                              r25 = _nt_ws
                              if r25
                                s24 << r25
                              else
                                break
                              end
                            end
                            r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
                            s0 << r24
                            if r24
                              if (match_len = has_terminal?("}", false, index))
                                r26 = true
                                @index += match_len
                              else
                                terminal_parse_failure('"}"')
                                r26 = nil
                              end
                              s0 << r26
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(FunctionNode,input, i0...index, s0)
      r0.extend(Function1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function][start_index] = r0

    r0
  end

end

class FunctionParser < Treetop::Runtime::CompiledParser
  include Function
end


end
end